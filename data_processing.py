# -*- coding: utf-8 -*-
"""00_data_preparation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D2Yyns8dm_m5hvF4NIDgQwKBehnra6fB

# Data Preparation
"""

#imports
import pandas as pd
import icd10
from matplotlib import pyplot as plt
import seaborn as sns
import numpy as np

predict = 'F60'
exact_match = False
diag_threshold = 3 # number of diagnoses for a patient to be included in reporting, ignored if < 0
from_year = 2019
to_year = 2020
generate_more_data = False
balance_dataset = True
predict_name = icd10.find(predict).description

q1_df = pd.read_csv("original data/q1.csv", dtype = {'Patient Number': int, 'Billing Year': int, 'Billing Month': int, 'Diagnosis': 'string', 'Birth Year': int, 'Sex': 'string'}, sep=";", error_bad_lines=False, warn_bad_lines=True)
q2_df = pd.read_csv("original data/q2.csv", dtype = {'Patient Number': int, 'Billing Year': int, 'Billing Month': int, 'Diagnosis': 'string', 'Birth Year': 'string', 'Sex': 'string'}, sep=";", error_bad_lines=False, warn_bad_lines=True)
q3_df = pd.read_csv("original data/q3.csv", dtype = {'Patient Number': int, 'Billing Year': int, 'Billing Month': int, 'Diagnosis': 'string', 'Birth Year': int, 'Sex': 'string'}, sep=";", error_bad_lines=False, warn_bad_lines=True)

q1_df = q1_df[~q1_df["Diagnosis"].str.contains("#", na=False)]
q2_df = q2_df[~q2_df['Birth Year'].str.contains("#NV", na=False)]

df = q1_df.append(q2_df).append(q3_df)

#df = df[(df['Billing Year'] >= from_year) & (df['Billing Year'] < to_year)]
df.groupby('Patient Number').count()

if not exact_match:
    df['Diagnosis'] = df['Diagnosis'].str.replace(predict+'\.[0-9]+', predict, regex=True)

#################################################################################
#                                 filter year                                   #
#################################################################################
if generate_more_data:
    df_temp = df[(df['Billing Year'] >= from_year) & (df['Billing Year'] < to_year)]
    df_predict = df[~df['Patient Number'].isin(df_temp['Patient Number'])]
    df_predict = df_predict[df_predict['Diagnosis'].str.contains(predict)]
    df = df_temp.append(df_predict)
else:
    df = df[(df['Billing Year'] >= from_year) & (df['Billing Year'] < to_year)]

df

if generate_more_data:
    abc = df[~df['Patient Number'].isin(df_temp['Patient Number'])]
    abc[abc['Diagnosis'].str.contains(predict)].groupby('Patient Number').size()
#else:
    #df[['Diagnosis'].str.contains(predict)].groupby('Patient Number').size()

df_crosstab = pd.crosstab([df['Patient Number'], df['Birth Year'], df['Sex']], df['Diagnosis'], margins=True, margins_name='Total')#normalize='index')

if diag_threshold > 0:
    df_crosstab = df_crosstab[df_crosstab['Total'] > diag_threshold]

df_crosstab

df_crosstab = df_crosstab.drop(labels='Total', axis=0)
df_crosstab = df_crosstab.drop(labels='Total', axis=1)
df_crosstab = df_crosstab.reset_index()

df_crosstab

if balance_dataset:
    df_crosstab_predict = []
    for i in df_crosstab.columns[df_crosstab.columns.str.contains(predict)]:
        df_crosstab_predict.append(df_crosstab[df_crosstab[i] > 0])
    
    df_crosstab_predict = pd.concat(df_crosstab_predict, ignore_index=True)
    df_crosstab_control = df_crosstab[~df_crosstab['Patient Number'].isin(df_crosstab_predict['Patient Number'])]
    df_pnr_predict = df_crosstab_predict['Patient Number']
    df_pnr_control = df_crosstab_control['Patient Number']
    
    predict_df = df[df['Patient Number'].isin(df_pnr_predict)]
    control_df = df[df['Patient Number'].isin(df_pnr_control)]
    control_df = control_df.sample(n = len(predict_df.groupby('Patient Number').size()))
    df_crosstab_control = df_crosstab_control.sample(n = len(df_crosstab_predict))
    df_crosstab = df_crosstab_predict.append(df_crosstab_control)

df_crosstab = df_crosstab.loc[:, (df_crosstab != 0).any(axis=0)]

df_crosstab[predict] = df_crosstab[predict].apply(lambda x: x if x == 0 else 1) # if predict diag is present, set it to 1

df_crosstab.to_csv('transformed data/ml_dataset_'+predict+'_crosstab.csv', sep=';', index=False)

pd.read_csv('transformed data/ml_dataset_'+predict+'_crosstab.csv', sep=';', index_col=0)

df_crosstab_predict

df_crosstab_control

